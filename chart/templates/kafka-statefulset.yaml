apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: cp-kafka
  labels:
    tier: middleware
    service: cp-kafka
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: cp-kafka
  replicas: {{ .Values.kafka.replicas }}
  template:
    metadata:
      labels:
        tier: middleware
        service: cp-kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "service"
                    operator: In
                    values:
                    - cp-kafka
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - zk
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 120
      containers:
      - name: cp-kafka
        imagePullPolicy: IfNotPresent
        image: confluentinc/cp-kafka:5.0.0
        resources:
          requests:
            memory: "8Gi"
            cpu: 2000m
        ports:
        - containerPort: 19092
          name: server
        command:
        - bash
        - -c
        - |
          export KAFKA_LISTENERS=PLAINTEXT_INTERNAL://0.0.0.0:19092,PLAINTEXT_EXTERNAL://0.0.0.0:9092
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT_INTERNAL://cp-kafka-${HOSTNAME##*-}.cp-kafka:19092,PLAINTEXT_EXTERNAL://kafka-${HOSTNAME##*-}.{{ .Values.domain }}:9092
          export KAFKA_BROKER_ID=${HOSTNAME##*-}
          exec /etc/confluent/docker/run
        readinessProbe:
          tcpSocket:
            port: 19092
          timeoutSeconds: 1
        env:
        - name: KAFKA_JMX_PORT
          value: "5555"
        - name: KAFKA_HEAP_OPTS
          value : "-Xmx6G -Xms6G"
        - name: KAFKA_OPTS
          value: "-Dlogging.level=INFO"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ template "zookeeper-connect" .Values.zookeeper.replicas }}"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: PLAINTEXT_INTERNAL
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/kafka
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ssd
      resources:
        requests:
          storage: {{ .Values.kafka.disk.size }}